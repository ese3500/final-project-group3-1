
final-proj-328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098a  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046e  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000195  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8e:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Initialize>:
#include "tests/roverTests.h"
#include "tests/serialTests.h"


void Initialize() {
    cli();
  96:	f8 94       	cli
    //ROVER_initialize();
    sei();
  98:	78 94       	sei
  9a:	08 95       	ret

0000009c <main>:
}

int main(void) {
    Initialize();
  9c:	0e 94 4b 00 	call	0x96	; 0x96 <Initialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0xa>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x14>
  b0:	00 00       	nop

    _delay_ms(1000);
    //testRover();
    echoSerial();
  b2:	0e 94 5c 00 	call	0xb8	; 0xb8 <echoSerial>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x1a>

000000b8 <echoSerial>:
#endif

#include "serialTests.h"
#include "../utils/serial.h"

void echoSerial() {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	c4 56       	subi	r28, 0x64	; 100
  c2:	d1 09       	sbc	r29, r1
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
    SerialInit(BAUD_PRESCALER);
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 7c 00 	call	0xf8	; 0xf8 <SerialInit>
    SerialPrint("Initialized!\n");
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 92 00 	call	0x124	; 0x124 <SerialPrint>
    char buf[100];

    while (1) {
        SerialPrint("Reading line...\n");
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 92 00 	call	0x124	; 0x124 <SerialPrint>
        SerialReadLine(buf);
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 9f 00 	call	0x13e	; 0x13e <SerialReadLine>
        SerialPrint(buf);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 92 00 	call	0x124	; 0x124 <SerialPrint>
  f6:	f3 cf       	rjmp	.-26     	; 0xde <echoSerial+0x26>

000000f8 <SerialInit>:

void SerialInit(int prescaler)
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(prescaler>>8);
  f8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)prescaler;
  fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 100:	88 e1       	ldi	r24, 0x18	; 24
 102:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 106:	e2 ec       	ldi	r30, 0xC2	; 194
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <SerialPrintChar>:
}

void SerialPrintChar(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 116:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11a:	95 ff       	sbrs	r25, 5
 11c:	fc cf       	rjmp	.-8      	; 0x116 <SerialPrintChar>
	// Put data into buffer and send data
	UDR0 = data;
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 122:	08 95       	ret

00000124 <SerialPrint>:
	
}

void SerialPrint(char* StringPtr)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 12a:	03 c0       	rjmp	.+6      	; 0x132 <SerialPrint+0xe>
	{
		SerialPrintChar(*StringPtr);
 12c:	0e 94 8b 00 	call	0x116	; 0x116 <SerialPrintChar>
		StringPtr++;
 130:	21 96       	adiw	r28, 0x01	; 1
	
}

void SerialPrint(char* StringPtr)
{
	while(*StringPtr != 0x00)
 132:	88 81       	ld	r24, Y
 134:	81 11       	cpse	r24, r1
 136:	fa cf       	rjmp	.-12     	; 0x12c <SerialPrint+0x8>
	{
		SerialPrintChar(*StringPtr);
		StringPtr++;
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <SerialReadLine>:

void SerialReadLine(char *out) {
 13e:	ac 01       	movw	r20, r24
    int index = 0;
    char cur_char = '\0';
 140:	90 e0       	ldi	r25, 0x00	; 0
		StringPtr++;
	}
}

void SerialReadLine(char *out) {
    int index = 0;
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
    char cur_char = '\0';

	while (cur_char != '\r' && cur_char != '\n') {
 146:	0c c0       	rjmp	.+24     	; 0x160 <SerialReadLine+0x22>
		while(!(UCSR0A & (1 << RXC0)));
 148:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	99 23       	and	r25, r25
 14e:	e4 f7       	brge	.-8      	; 0x148 <SerialReadLine+0xa>

		cur_char = (char) UDR0;
 150:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		out[index++] = cur_char;
 154:	fa 01       	movw	r30, r20
 156:	e2 0f       	add	r30, r18
 158:	f3 1f       	adc	r31, r19
 15a:	90 83       	st	Z, r25
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255

void SerialReadLine(char *out) {
    int index = 0;
    char cur_char = '\0';

	while (cur_char != '\r' && cur_char != '\n') {
 160:	9d 30       	cpi	r25, 0x0D	; 13
 162:	11 f0       	breq	.+4      	; 0x168 <SerialReadLine+0x2a>
 164:	9a 30       	cpi	r25, 0x0A	; 10
 166:	81 f7       	brne	.-32     	; 0x148 <SerialReadLine+0xa>

		cur_char = (char) UDR0;
		out[index++] = cur_char;
	}

	out[index] = '\0';
 168:	fa 01       	movw	r30, r20
 16a:	e2 0f       	add	r30, r18
 16c:	f3 1f       	adc	r31, r19
 16e:	10 82       	st	Z, r1
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
